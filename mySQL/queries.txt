-----database
create database mydb;
use mydb;  
drop database mydb;
alter database mydb read only = 1;

-----tables
create table employees(
    employee_id int,
    first_name varchar(50),
    last_name varchar(50),
    hourly_pay decimal(5,2),
    hire_date date
);
select * from employees;
rename table employees to workers;
drop table name;
alter table employees add phone_number varchar(15);
alter table employees rename column phone_number to email;
alter table employees modify column email varchar(100);
alter table employees modify email varchar(100) after last_name; //or just first
drop column email;

-----insert rows
insert into tablename
values (1,"eugene","krabs",23.45,"2025-30-04"),(2,"spongbob","squarpants",12.45,"2026-30-04");
insert into tablename (employee_id,first_name, last_name)
 values (1,"eugene","krabs"),(2,"spongbob","squarpants"); //other fields are not 

 -----select data from table
 select * from employees
 select first_name, last_name from employees
 select * from employees where employee_id=1;
 select * from employees where hourly_pay <= 40; // != IS NULL IS NOT NULL
 select * from transactions order by first_name,last_name desc;
 select * from transactions limit 4; //or 4 3 four times after 3

 ------update and delete data from table
 update employees 
 set houly_=10,first_name="name"
 where employee_id=6; //if we delete this line it will effect all the rows
delete from employees where employee_id=6;

-------autocommit
set autocommit = off; 
commit; // to save changes
rollback; // to get back to saved changes

-------time
current_date() // +1 means tomorow and -1 means yesterday
current_time()
now() //date and time

-------constraints
create table employees(
    employee_id int unique,
    first_name varchar(50) NOT NULL,
    last_name varchar(50),
    hourly_pay decimal(5,2),
    check (hourly_pay >= 10.00)
    //constraint chk_pay check (hourly_pay >= 10.00)
);
alter table tablename add constraint unique(product_name);
alter table products modify price decimal(4,2) NOT NULL;
alter table employees add constraint chk_pay check(hourly_pay>=10.0)
alter table drop check chk_pay;

create table products(
    id int,
    name varchar(25),
    price decimal(4,2) default 0
);
alter table products alter price set default 0;

create table transactions(
    transaction_id int primary key auto_increment,
    amount decimal(5,2)
    customer_id int,
    foreign key(customer_id) references customers(customer_id);
);
alter table transactions add constraint primary key(transaction_id);
alter table transactions;
drop foreign key transactions_ibfk_1;

------joins
select * from transactions inner join customers
on transactions.customer_id=customers.customer_id;

select * from transactions left join customers
on transactions.customer_id=customers.customer_id;

select * from transactions right join customers
on transactions.customer_id=customers.customer_id;

------functions
select count(amount) from transactions as count;
//max(amount), min(amount), avg(amount), sum(amount), concat(first_name," ",last_name)

------logical operator
select * from employees
where jore_date < "2023-01-5" AND job= "cook";
//_AND_ _OR_ NOT_ BETWEEN_AND_ IN(_,_,_)

------LIKE
select * from employees
where first_name LIKE "SP%";
// % _


------union
select first_name, last_name from employees;
union
select first_name,last_name from customers;
//union all show duplicated data too 

------view
create view employee_attendance as
select first_name, last_name 
from employees;

------index
show indexes from customers;
create index last_name_idx
on customers(last_name);
create index last_name_first_name_idx
on customers(last_name,first_name);
alter table customers drop index last_name_idx;

------queries
SELECT first_name, last_name, hourly_pay,
        (SELECT avg(hourly_pay) FROM employees) AS avg_pay
FROM employees;

------group by
select sum(amount), order_date
from transactions
group by order_date;
//if you want to use where use having instead here
//with rollup after group by will show a total value row

-------on delete
on delete set null = when a fk is deleted, replace fk with null
on delete cascade = when a fk is deleted, delete row
alter table transactions add constrait fk_transaction_id
foreign key(customer_id) references customers(customer_id)
on delete cascade;

-------stored procedure
DELIMITER $$
create procedure get_customers()
begin
    select * from customers; //we stored this code to use it with a functions called get_customers()
end $$
DELIMITER ;

CALL get_customers();
drop procedure get_customers;

DELIMITER $$
create procedure find_customers(IN id INT) //or more arguments
begin
    select * from customers
    where customer_id = id;
end $$
DELIMITER ;
call find_customers(5);

-------trigger
//do somthing before or after an update delete insert ...
create trigger befor_hourlypay_update
befor update on employees
for each row
set salary = (NEW.hourly_pay * 2080); //new or old
SHOW TRIGGERS;
